multi lw 0 0 pos0   # $0 = 0
 lw 0 1 pos0        # $1 = 0 as product
 lw 0 2 inputC      # $2 = memory[inputC] as multicand
 lw 0 3 inputP      # $3 = memory[inputP] as multiplier
 lw 0 4 pos1        # $4 = 1 temporary control
 lw 0 6 neg1        # $6 = -1 temporary counter
 lw 0 7 pos14       # $7 = 14 constant
loop nand 3 4 5     # keep nand value between mplier and temp into $5
 nand 5 5 5         # change nand-gate to and-gate
 beq 5 0 shift      # if value from $5 is equal 0 then go to shift
 add 2 1 1          # else add mplier to product
 add 6 7 7          # $7 -= 1 
 beq 0 7 done       # is $7 == 0? if false go to loop    
shift add 2 2 2     # shift left mcand by adding mcand
 add 4 4 4          # shift left temp by adding temp
 add 6 7 7          # $7 -= 1 
 beq 0 7 done       # is $7 == 0? if false go to loop
 beq 0 0 loop
 noop
done halt

pos1 .fill 1
pos0 .fill 0
pos14 .fill 14
neg1 .fill -1
subAdr .fill loop   # contains the address of loop
inputC .fill 5      # input multicand = 5
inputP .fill 7      # input multiplier = 7
stack .fill 0       # beginning of stack (value is irrelevent)